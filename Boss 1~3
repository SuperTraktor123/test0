//in c++
/*
 *This is a simple code to pass the first 3 bosses.
 *Includes a rough algorithm to set thrust, preventing the pod from detouring.
 *Includes a judgement to decide the sweet time for BOOST. That is, only boost when the angle is 0 and the distance is long enough.
 *Behaves very badly against Boss 4.
*/

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

/**
 * Auto-generated code below aims at helping you parse
 * the standard input according to the problem statement.
 **/

int main()
{

    // game loop
    while (1) {
        int x;
        int y;
        int next_checkpoint_x; // x position of the next check point
        int next_checkpoint_y; // y position of the next check point
        int next_checkpoint_dist; // distance to the next checkpoint
        int next_checkpoint_angle; // angle between your pod orientation and the direction of the next checkpoint
        cin >> x >> y >> next_checkpoint_x >> next_checkpoint_y >> next_checkpoint_dist >> next_checkpoint_angle; cin.ignore();
        int opponent_x;
        int opponent_y;
        cin >> opponent_x >> opponent_y; cin.ignore();

        // Write an action using cout. DON'T FORGET THE "<< endl"
        // To debug: cerr << "Debug messages..." << endl;

        float speed0;
        speed0 = -10/9;
        speed0*=next_checkpoint_angle;
        speed0+=100;
        if (speed0<0)
            speed0 = -speed0;
        if (speed0>100)
            speed0 = 100;
        int speed1 = speed0+0.5;
        string speed = to_string(speed1);
        if (next_checkpoint_angle == 0 && next_checkpoint_dist > 10000)
            cout << next_checkpoint_x << " " << next_checkpoint_y << " BOOST" << endl;
        else
            cout << next_checkpoint_x << " " << next_checkpoint_y << " " << speed << endl;
        
        // You have to output the target position
        // followed by the power (0 <= thrust <= 100)
        // i.e.: "x y thrust"
        //cout << next_checkpoint_x << " " << next_checkpoint_y << thrust << endl;
    }
}
